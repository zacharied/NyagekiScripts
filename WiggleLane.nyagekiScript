/*
 * WiggleLane
 *
 * DESCRIPTION
 * Inserts path nodes to create a "wiggle" effect in a lane range
 *
 * SELECTION
 * Two adjacent lane nodes of the same lane
 */

using System;
using Caliburn.Micro;
using OngekiFumenEditor.Base;
using OngekiFumenEditor.Modules.FumenVisualEditor.Base;
using OngekiFumenEditor.Modules.FumenVisualEditor.Kernel;
using OngekiFumenEditor.Utils;
using OngekiFumenEditor.Modules.EditorScriptExecutor.Scripts;
using System.Linq;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using MahApps.Metro.Controls;
using OngekiFumenEditor.Base.EditorObjects;
using OngekiFumenEditor.Base.OngekiObjects.Beam;
using OngekiFumenEditor.Base.OngekiObjects.ConnectableObject;
using OngekiFumenEditor.Base.OngekiObjects.Lane;
using OngekiFumenEditor.Base.OngekiObjects.Lane.Base;
using OngekiFumenEditor.Base.OngekiObjects.Wall;
using Window = System.Windows.Window;
using WindowStartupLocation = System.Windows.WindowStartupLocation;

var targetEditor = ScriptArgs.TargetEditor;
if (targetEditor is null)
{
    Log.LogInfo("No target editor selected. Exiting.");
    return;
}

var fumen = targetEditor.Fumen;
var setting = targetEditor.Setting;
var nyagekiProj = targetEditor.EditorProjectData;

var editorManager = IoC.Get<IEditorDocumentManager>();

var laneRange = fumen.Lanes.SelectMany<LaneStartBase, ConnectableObjectBase>(l => l.Children)
    .Concat(fumen.Lanes.Select(l => l.ReferenceStartObject))
    .Where(l => l.IsSelected)   
    .ToList();

if (laneRange.Count() != 2) {
    Log.LogError($"Invalid lane selection ({laneRange.Count})");
    return;
}

var (startPoint, endPoint) = (laneRange[0], laneRange[1]);
if (startPoint.TGrid > endPoint.TGrid) {
    (endPoint, startPoint) = (startPoint, endPoint);
}

if (startPoint.LaneType != endPoint.LaneType) {
    Log.LogError("Selection must be of same type lanes");
    return;
}

if (startPoint.NextObject != endPoint) {
    Log.LogError("Selected nodes must be adjacent");
    return;
}

var newObjects = new List<ConnectableChildObjectBase>();

var options = Dialog();
if (!options.Success) {
    return;
}

targetEditor.UndoRedoManager.ExecuteAction(new LambdaUndoAction("Wiggle lane", Apply, Undo));

return;

#region Functions

TGrid EaseTGrid(EasingTypes easingType, TGrid start, TGrid end, TGrid curr)
{
    var easedValue = Interpolation.ApplyEasing(easingType, start.TotalUnit, end.TotalUnit, curr.TotalUnit);
    var diff = end - new GridOffset(start.Unit, start.Grid);
    var easedTGrid = start + new GridOffset((float)(diff.TotalUnit * easedValue), 0);
    return easedTGrid;
}

DialogResults Dialog()
{
    var dialog = new MyDialog((int)setting.XGridUnitSpace);
    dialog.ShowDialog();
    return dialog.Results;
}

void Apply()
{
    Log.LogInfo("Applying...");
    var wiggleRange = options.XGridMultiplier;
    var offset = new GridOffset(0, (int)(laneRange[0].TGrid.ResT / setting.BeatSplit / 4));

    var entries = new Dictionary<TGrid, XGrid>();
    var end = endPoint.TGrid;
    
    Log.LogInfo($"Starting: {startPoint.TGrid} -> {end} ({offset})");
    var wiggleReverse = options.Invert;
    for (var t = startPoint.TGrid + offset; t < end; t += offset) {
        var easedT = EaseTGrid(options.TGridEasing, startPoint.TGrid, end, t);
        Log.LogInfo($"{easedT}");
        if (easedT >= end || easedT < startPoint.TGrid)
            continue;

        var baseX = startPoint.ReferenceStartObject.CalulateXGrid(easedT).TotalUnit;
        var multiplier = Interpolation.ApplyEasing(options.XGridEasing,
            (easedT.TotalUnit - startPoint.TGrid.TotalUnit) / (end.TotalUnit - startPoint.TGrid.TotalUnit));
        var x = baseX + options.XGridMultiplier * multiplier * (wiggleReverse ? -1 : 1);
        var xDistance = x - baseX;
        if (!options.CenterStartPoint) {
            x += Math.Abs(xDistance) * (options.Invert ? - 1 : 1);
        }
        entries[easedT] = XGrid.FromTotalUnit((float)x);

        wiggleReverse = !wiggleReverse;
    }
    
    foreach (var (t, x) in entries) {
        var newChild = GetNext();
        newChild.TGrid = t;
        newChild.XGrid = x;
        startPoint.ReferenceStartObject.InsertChildObject(t, newChild);
        newObjects.Add(newChild);
    }
}

void Undo()
{
    foreach (var child in newObjects) {
        laneRange[0].ReferenceStartObject.RemoveChildObject(child);
    }

    newObjects.Clear();
}

ConnectableChildObjectBase GetNext()
{
    return startPoint.ReferenceStartObject switch
    {
        LaneLeftStart => new LaneLeftNext(),
        LaneCenterStart => new LaneCenterNext(),
        LaneRightStart => new LaneRightNext(),
        WallLeftStart => new WallLeftNext(),
        WallRightStart => new WallRightNext(),
        ColorfulLaneStart => new ColorfulLaneNext(),
        EnemyLaneStart => new EnemyLaneNext(),
        BeamStart => new BeamNext(),
        AutoplayFaderLaneStart => new AutoplayFaderLaneNext(),
        _ => throw new ArgumentOutOfRangeException()
    };
}

#endregion

#region  Forms

internal sealed class MyDialog : Window
{
    public DialogResults Results = new();

//    private readonly ImmutableList<EasingTypes> TGridEasingTypes = new[] {
//        EasingTypes.None, EasingTypes.In, EasingTypes.Out, EasingTypes.OutBack, EasingTypes.InBack
//    }.ToImmutableList();
    private ImmutableList<EasingTypes> TGridEasingTypes => XGridEasingTypes;

    private readonly ImmutableList<EasingTypes> XGridEasingTypes = Enum.GetValues<EasingTypes>().ToImmutableList();

    public MyDialog(int xGridSpacing)
    {
        SizeToContent = SizeToContent.WidthAndHeight;
        WindowStartupLocation = WindowStartupLocation.CenterOwner;
        Background = new SolidColorBrush(Colors.DarkGray);
        ResizeMode = ResizeMode.NoResize;
        Title = "Wiggle";

        var root = new StackPanel() { Orientation = Orientation.Vertical };

        var easingComboBox = new ComboBox
        {
            ItemsSource = TGridEasingTypes,
            SelectedIndex = 0
        };
        easingComboBox.SelectionChanged += (sender, args) => Results.TGridEasing = (EasingTypes)args.AddedItems[0]!;

        var invertCheckBox = new CheckBox() { IsChecked = false };
        invertCheckBox.Click += (sender, args) =>
        {
            Results.Invert = invertCheckBox.IsChecked.Value;
        };
        
        var xEasingComboBox = new ComboBox()
        {
            ItemsSource = XGridEasingTypes,
            SelectedIndex = 0
        };
        xEasingComboBox.SelectionChanged += (sender, args) => Results.XGridEasing = (EasingTypes)args.AddedItems[0]!;

        var xSpacingEntry = new NumericUpDown() { Value = xGridSpacing };
        xSpacingEntry.ValueChanged += (sender, args) =>
        {
            Results.XGridMultiplier = (int)xSpacingEntry.Value;
        };
        Results.XGridMultiplier = xGridSpacing;

        var centerBox = new CheckBox() { IsChecked = false };
        centerBox.Click += (sender, args) =>
        {
            Results.CenterStartPoint = centerBox.IsChecked!.Value;
        };
        
        var okBox = new Button() { Content = "OK" };
        okBox.Click += (sender, args) =>
        {
            Results.Success = true;
            Close();
        };

        var easingPanel = new StackPanel
        {
            Orientation = Orientation.Horizontal, Children =
            {
                new Label { Content = "TGrid easing" },
                easingComboBox
            }
        };

        var invertPanel = new StackPanel()
        {
            Orientation = Orientation.Horizontal, Children =
            {
                new Label() { Content = "Reverse starting direction" },
                invertCheckBox
            }
        };

        var xGridPanel = new StackPanel()
        {
            Orientation = Orientation.Horizontal,
            Children =
            {
                new Label() { Content = "XGrid easing" },
                xEasingComboBox,
                new Label() { Width = xGridSpacing },
                xSpacingEntry
            }
        };

        var centerBoxPanel = new StackPanel()
        {
            Orientation = Orientation.Horizontal,
            Children =
            {
                new Label() { Content = "Center start point" },
                centerBox
            }
        };

        root.Children.Add(easingPanel);
        root.Children.Add(invertPanel);
        root.Children.Add(xGridPanel);
        root.Children.Add(centerBoxPanel);
        root.Children.Add(okBox);

        AddChild(root);
    }
}

public struct DialogResults
{
    public bool Success = false;
    public bool Invert = false;
    public EasingTypes TGridEasing = EasingTypes.None;
    public EasingTypes XGridEasing = EasingTypes.None;
    public int XGridMultiplier = 0;
    public bool CenterStartPoint = false;

    public DialogResults()
    {
    }
}

#endregion
